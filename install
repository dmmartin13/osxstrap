#!/bin/bash

# Colors
GREEN='\e[1;32m'
RED='\e[1;31m'
BLUE='\e[1;34m'
PURPLE='\e[1;35m'
YELLOW='\e[1;33m'
GRAY='\e[1;37m'
COLOR_OFF='\e[0m'

# Command line arg defaults
VERBOSE=0
DEV_INSTALL=0

# Constants
INSTALL_DIR="$HOME/.osxstrap"
ROLES_INSTALL_DIR_ARG=""
REPO_URL="https://github.com/osxstrap/osxstrap"

function output_running {
    printf "${PURPLE} --> ${COLOR_OFF}$1\n" 1>&2
}

function output_debug {
    if [ "$VERBOSE" = 1 ] ; then
        printf "${GREEN} ... ${COLOR_OFF}$1\n" 1>&2
    fi
}

function output_warning {
    printf "${YELLOW} ! $1${COLOR_OFF}\n" 1>&2
}

function error {
    printf "${RED} !!! $1 ${COLOR_OFF}\n" 1>&2
    exit 1
}
  
function banner {
printf "${PURPLE}                         _                      ${COLOR_OFF}\n"
printf "${PURPLE}                        | |                     ${COLOR_OFF}\n"
printf "${PURPLE}   ___   ___ __  __ ___ | |_  _ __  __ _  _ __  ${COLOR_OFF}\n"
printf "${PURPLE}  / _ \ / __|\ \/ // __|| __|| '__|/ _\` || '_ \ ${COLOR_OFF}\n"
printf "${PURPLE} | (_) |\__ \ >  < \__ \| |_ | |  | (_| || |_) |${COLOR_OFF}\n"
printf "${PURPLE}  \___/ |___//_/\_\|___/ \__||_|   \__,_|| .__/ ${COLOR_OFF}\n"
printf "${PURPLE}                                         | |    ${COLOR_OFF}\n"
printf "${PURPLE}                                         |_|    ${COLOR_OFF}\n"
printf "${PURPLE}                             http://osxstrap.org${COLOR_OFF}\n\n"
printf "${GRAY}Script credits: http://superlumic.com, https://github.com/boxcutter/osx, and http://patorjk.com/software/taag.${COLOR_OFF}\n"
}

# Check whether a command exists - returns 0 if it does, 1 if it does not
function exists {
  output_debug "Checking if the '$1' command is present."
  if command -v $1 >/dev/null 2>&1
  then
    output_debug "Command '$1' is present."
    return 0
  else
    output_debug "Command '$1' is not present."
    return 1
  fi
}

usage()
{
cat << EOF
usage: $0 options

Installs osxstrap.

OPTIONS:
   -h      Show this message
   -d      Install in development mode
   -v      Verbose output
EOF
}

# credits https://github.com/boxcutter/osx/blob/master/script/xcode-cli-tools.sh
function install_clt {
    output_running "Installing OSX command line tools."
    # Get and install Xcode CLI tools
    OSX_VERS=$(sw_vers -productVersion | awk -F "." '{print $2}')

    # on 10.9+, we can leverage SUS to get the latest CLI tools
    if [ "$OSX_VERS" -ge 9 ]; then
        # create the placeholder file that's checked by CLI updates' .dist code
        # in Apple's SUS catalog
        touch /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress
        # find the CLI Tools update
        PROD=$(softwareupdate -l | grep "\*.*Command Line" | head -n 1 | awk -F"*" '{print $2}' | sed -e 's/^ *//' | tr -d '\n')
        # install it
        softwareupdate -i "$PROD" -v
        rm /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress

    # on 10.7/10.8, we instead download from public download URLs, which can be found in
    # the dvtdownloadableindex:
    # https://devimages.apple.com.edgekey.net/downloads/xcode/simulators/index-3905972D-B609-49CE-8D06-51ADC78E07BC.dvtdownloadableindex
    else
        [ "$OSX_VERS" -eq 7 ] && DMGURL=http://devimages.apple.com.edgekey.net/downloads/xcode/command_line_tools_for_xcode_os_x_lion_april_2013.dmg
        [ "$OSX_VERS" -eq 7 ] && ALLOW_UNTRUSTED=-allowUntrusted
        [ "$OSX_VERS" -eq 8 ] && DMGURL=http://devimages.apple.com.edgekey.net/downloads/xcode/command_line_tools_for_osx_mountain_lion_april_2014.dmg

        TOOLS=clitools.dmg
        curl "$DMGURL" -o "$TOOLS"
        TMPMOUNT=`/usr/bin/mktemp -d /tmp/clitools.XXXX`
        hdiutil attach "$TOOLS" -mountpoint "$TMPMOUNT"
        installer $ALLOW_UNTRUSTED -pkg "$(find $TMPMOUNT -name '*.mpkg')" -target /
        hdiutil detach "$TMPMOUNT"
        rm -rf "$TMPMOUNT"
        rm "$TOOLS"
        exit
    fi
}

banner

while getopts "vdh" OPTION
do
     case $OPTION in
         h)
             usage
             exit 1
             ;;
         d)
             DEV_INSTALL=1
             ;;
         v)
             VERBOSE=1
             ;;
         ?)
             usage
             exit
             ;;
     esac
done

if [ "$DEV_INSTALL" = 1 ] ; then
    output_debug "Detected dev install (-d) flag."
    ROLES_INSTALL_DIR_ARG=" -p $INSTALL_DIR/roles"
fi

if [ "$VERBOSE" = 1 ] ; then
    output_debug "Detected verbose (-v) flag."
fi

output_debug "Checking if we need to ask for a sudo password"

sudo -v
export ANSIBLE_ASK_SUDO_PASS=True

output_debug "Keep-alive: update existing sudo time stamp until we are finished"

while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

if [[ ! -f "/Library/Developer/CommandLineTools/usr/bin/clang" ]]; then
    install_clt
else
    output_running "OSX command line tools already installed, skipping."
fi

# Install pip
if ! exists pip; then
    output_running "Installing pip."
    sudo easy_install --quiet pip
else
    output_running "pip already installed, skipping."
fi

# Install Ansible
if ! exists ansible; then
    output_running "Installing Ansible pip package."
    sudo pip install ansible
else
    output_running "Ansible pip package installed, skipping."
fi

# Install osxstrap
output_debug "Creating install directory '$INSTALL_DIR'."
mkdir -p $INSTALL_DIR
if [ -d "$INSTALL_DIR/.git" ]; then
    output_running "Updating osxstrap core using git"
    cd $INSTALL_DIR
    git pull -q
else
    output_running "Cloning osxstrap core from $REPO_URL"
    cd $INSTALL_DIR
    git clone -q $REPO_URL .
fi

if [ "$DEV_INSTALL" = 1 ] ; then
    output_debug "Creating dev roles directory '$INSTALL_DIR/roles'."
    mkdir -p $INSTALL_DIR/roles
fi

output_running "Installing required Ansible roles"

ansible-galaxy install -f -r requirements.yml$ROLES_INSTALL_DIR_ARG

output_running "Done!"